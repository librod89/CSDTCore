package pCSDT.Presentation;

/**
 *
 * @author Jason Sanchez
 *
 * Main Class of the Project
 * Most of the UI-related code is generated by Netbeans Palette
 */
import java.util.logging.Level;
import java.util.logging.Logger;
import pCSDT.Scripting.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.*;
import pCSDT.Scripting.SCElem.*;
import java.text.*;
import java.util.*;
import javax.imageio.ImageIO;
import pCSDT.Utility;
import java.net.*;


public abstract class GUI extends JApplet
{
    // custom variable
    // record the original locations of the main and right splitter
    double mainSplitterLoc = -1;
    double rightSplitterLoc = -1;
    URL codebaseURL = null;

    public GUI()
    {
	pEngine.SetGui(this);
    }

    class MyFilter extends javax.swing.filechooser.FileFilter
    {
        public boolean accept(File file)
        {
            String filename = file.getName();
            return filename.endsWith(".scr");
        }
        public String getDescription() {return "*.scr";}
    }

    class DemoMenuItemActionListener implements ActionListener
    {
        GUI gui;
        String targetUrl;
        public DemoMenuItemActionListener(GUI gui, String url) {
            this.gui = gui;
            targetUrl = url;
        }

        public void actionPerformed(ActionEvent e) {
            // load script
            ClearEngine();
            try {
                if (targetUrl.startsWith("http://")) {
                    LoadFromXml(Utility.FormatURL(targetUrl));
                }
                else {
                    LoadFromXml(gui.getClass().getResource(targetUrl));
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

    }

    class CanvasMouseMotionListener implements MouseMotionListener
    {
        GUI gui;
        public CanvasMouseMotionListener(GUI gui)
	{
            this.gui = gui;
        }
        public void mouseMoved(MouseEvent e)
	{
            Vector3 v = gui.getActualLocVec(e.getPoint());
            jLabelMouseLoc.setText(gui.DisplayMouseLocation(v.x(), v.y(), v.z()));
            Vector<PObject> objs = PickAll(e.getX(), e.getY());

            int pickedObjsNum = objs.size();
            if (pickedObjsNum == 0)
                jLabelStatus.setText("");
            else if (pickedObjsNum == 1)
            {
                PObject obj = objs.get(0);
                jLabelStatus.setText("Click to select " + obj.GetName() + " [" + obj.GetClassName() + "]");
            }
            else
            {
                jLabelStatus.setText("You are over multiple objects. Click to select one of them.");
            }
        }
        public void mouseDragged(MouseEvent e) {}
    }

    class CanvasMouseListener implements MouseListener
    {
        GUI gui;
        public CanvasMouseListener(GUI gui) {this.gui = gui;}
        public void mouseClicked(MouseEvent e) {}
        public void mousePressed(MouseEvent e) {}
        public void mouseReleased(MouseEvent e) {}
        public void mouseEntered(MouseEvent e) {}

        // empty the text in the mouse locaiton indicator if the mouse is away
        // from the canvas
        public void mouseExited(MouseEvent e) {gui.jLabelMouseLoc.setText("   ");}
    }

    /**
     * The current render state for this OpenGL instance.  Either things
     * are actively being rendered, or they are in "presentation mode" where
     * they are just being shown to the user and nothing more.
     */
    public enum eRenderState
    {
        Stopped,
        Animating
    }
    public enum eGridStyle
    {
        Cartesian,
        Polar
    }

    protected String goalImgPropertiesStr = null;
    protected String BGImgPropertiesStr = null;
    protected String demoPropertiesStr = null;
    protected String singleDemoXmlStr = null;
    protected String demoImgPropertiesStr = null;
    //protected String iconPropertiesStr = null;
    public static boolean reducedColorSelection = false;
    public static boolean needsToDraw = true;
    public static boolean animation = true;
    public static boolean useCodeletDisplayOrder = false;
    
            

    
    protected boolean bDemoImagesButtonEnabled = false;
    protected boolean bGoalImagesButtonEnabled = false;
    protected boolean bEraseDrawingButtonEnabled = true;
    protected boolean bTimerVisible = false;

    private PEngine pEngine = GetEngine();
    private pCSDT.Presentation.JPnlScriptlet jPnlScriptlet;
    private JPnlOperatorMgr operatorMgr;
    private JPnlPropertyMgr propertyMgr;
    private JPnlVariableMgr variableMgr;
    private JPnlMgr eventMgr;
    private JPnlMgr methodMgr;
    private JPnlMgr controlMgr;
    private JPanel canvas;
    private JScrollPane eventPane;
    private JScrollPane methodPane;
    private JScrollPane controlPane;
    private JScrollPane operatorPane;
    private JScrollPane propertyCodeletPane;
    private JScrollPane variableCodeletPane;
    public static eRenderState renderState = eRenderState.Stopped;
    protected eGridStyle gridStyle = eGridStyle.Cartesian;
    NumberFormat timeFormat = new java.text.DecimalFormat("0.00");  // number of decimal points
    NumberFormat mouseCoordFormat = new DecimalFormat("0.00");

    private String m_savePath = "";
    private LayoutInfo m_l = new LayoutInfo(GUI.class.getClassLoader());

    // Current selected object set:
    PObject selection;

    protected boolean pEngineTextureBeUpdated = false;  // suggest if the texture of pEngine needs to be updated

    // indicate if DeferredInitialize() has been called or not
    boolean bDeferredInitialized = false;

    // for screen capture
    Robot robot;
    PngFileFilter pngFileFilter = new PngFileFilter();

    public JPanel getCanvas() {return canvas;}
    public Dimension getCanvasSize() {return canvas.getSize();}

    /**
     * Set the pEngineTextureBeUpdated flag
     * @param b true or false
     */
    public void SetPEngineTextureBeUpdated(boolean b) {
        pEngineTextureBeUpdated = b;
    }

    /**
     * Obtain the 3D vector of sim world given a screen location p
     * @param p screen location, relative to top-left corner of display canvas
     * @return the 3D location of the point
     */
    public Vector3 GetSimCoordFromScreenCoord(Point p) {
        float x = 2f*p.x/canvas.getWidth() - 1;
        float y = 1 - 2f*p.y/canvas.getHeight();
        Matrix4x4 A = pEngine.GetTransformMatrix();
        Matrix4x4 a = A.Dup().Invert();
        return a.Mul(x, y);
    }

    /**
     * Obtain the 3D vector given a screen location p
     * PEngine subclass which has its own scaling scheme should override this
     * class. First take the output of this superclass function, and then do
     * the scaling
     * @param p screen location, relative to top-left corner of display canva
     * @return the 3D location of the point
     */
    abstract protected Vector3 getActualLocVec(Point p);

    public void ReloadObjMgr() {
        jPnlObjMgr.ReloadObjects(pEngine);
    }
    
    /**
     * Constructs an object of the specified type with the specified parameters
     * @param c The class to construct
     * @param name The name of the object to construct
     * @param desc The description of the object to construct
     * @return A reference to the newly added object.  This object will also be present in
     * the objects collection of the internal PEngine, or null if no object could be constructed.
     */
    public PObject ConstructObject(Class c, String name, String desc)
    {
	PObject pObj;
	try
	{
            pObj = PObject.Construct(c, name, desc, pEngine);
            AddConstructedObject(pObj);
	}
	catch(Exception x)
	{
            System.out.println(x);
            return null;
	}
	return pObj;
    }

    /**
     * Duplicates an object of the specified type with the specified parameters
     * @param c The class to construct
     * @param name The name of the object to construct
     * @param desc The description of the object to construct
     * @return A reference to the newly added object.  This object will also be present in
     * the objects collection of the internal PEngine, or null if no object could be constructed.
     */
    public PObject DuplicateObject(PObject pObject)
    {
        PObject pObj = pObject.clone();
        PEventList[] pEvtLists = pObj.GetEventLists();
        for (PEventList pEvtList: pEvtLists) {
            pEvtList.AssociateNullIdentityMethodTo(pObj);
        }
	AddConstructedObject(pObj);
	return pObj;
    }

    public void AddConstructedObject(PObject pObj)
    {
	pEngine.AddObject(pObj);
	jPnlObjMgr.AddObject(pObj);
    }

    /**
     * Remove specified PObject
     * @param pObj the pObject to get removed
     */
    public void RemoveObject(PObject pObj)
    {
        pEngine.DelObject(pObj);
        jPnlObjMgr.RemObject(pObj);
    }

    public void SetTimeLabelText(float f)
    {
        jLabelTime.setText(timeFormat.format(f) + "s");
    }

    public boolean LoadFromXml(URL path)
    {
        // Clear everything in the original store first

        Vector<PObject> objList = new Vector<PObject>(0);
        for (PObject obj: pEngine.objs)
            objList.add(obj);
        for (PObject obj: objList)
	{
            pEngine.OnDelObject(obj);
            pEngine.DelObject(obj);
        }

        try {pEngine.LoadXml(path);}
	catch(Exception e) {
            e.printStackTrace();
            return false;
        }
        pEngine.DeferredInitialize();
        ////jPnlObjMgr.ReloadObjects(pEngine);
        // reset everything to initial state after loading
        pEngine.Reset();
        // set optimal size for JPnlScriptlet
        this.jPnlScriptlet.SetOptimalSize();
        needsToDraw = true;
        return true;
    }

    // <editor-fold defaultstate="collapsed" desc="Abstract methods and such">
    /**
     *
     * @return The engine that will be used in this CSDT
     */
    public abstract PEngine GetEngine();

    /**
     * This creates the one and only canvas on which all drawing is to take
     * place, and where user input will be focused.
     * @return The CSDT consumer canvas
     */
    public abstract JPanel CreateCanvas();

    /**
     * Attempts to pick a particular object out of the rendering set, and
     * return that object.
     * @param x The x-coordinate, relative to the top-left corner of the panel
     * @param y The y-coordinate, relative to the top-left corner of the panel
     * @return A picked object, or null if no such object exists.  Optionally,
     * it may return the engine instead, if the engine has properties.
     */
    abstract public PObject Pick(double x, double y);

    /**
     * Attempts to pick all objects lying on (x, y) relative to the top-left
     * corner of the panel
     * @param x The x-coordinate, relative to the top-left corner of the panel
     * @param y The y-coorindate, relative to the top-left corner of the panel
     * @return A Vector of Pobject
     */
    abstract public Vector<PObject> PickAll(double x, double y);

    /**
     *
     * @return The libraries that will be used in conjunction with the PEgine
     */
    PEngine[] GetLibs() {return new PEngine[0];}

    /**
     * Called to notify the derived class when the render state has changed
     * @param oldRs The old render state
     */
    protected void OnRenderStateChanged(eRenderState oldRs) {}

    /**
     * If a consumer wishes to use their own event manager GUI, you can
     * override this function and provide your own.
     * @return A new event manager panel
     */
    protected JPnlMgr CreatePnlEventMgr()
    {
        return new JPnlEventMgr(m_l, jPnlScriptlet);
    }

    /**
     * If a consumer wishes to use their own method manager GUI, you can
     * override this function and provide your own.
     * @return A new method manager panel
     */
    protected JPnlMgr CreatePnlMethodMgr()
    {
        return new JPnlMethodMgr(m_l, jPnlScriptlet);
    }

    /**
     * If a consumer wishes to use their own control manager GUI, you can
     * override this function and provide your own.
     * @return A new control manager panel
     */
    protected JPnlMgr CreatePnlControlMgr()
    {
        return new JPnlControlMgr(m_l, jPnlScriptlet);
    }

    /**
     * If a consumer wishes to use their own property manager class, you can
     * override this function and provide your own.
     * @return A new property manager panel
     */
    protected JPnlMgr CreatePnlPropertyMgr()
    {
        if (jPnlObjMgr == null) {
            System.out.println("jPnlObjMgr == null");
        }
        return new JPnlInitPropMgr(jPnlObjMgr);
    }

    /**
     * If a consumer wishes to use their own expression manager class, you can
     * override this function and provide your own.
     * @return A new property manager panel
     */
    protected JPnlOperatorMgr CreatePnlOperatorMgr()
    {
        return new JPnlOperatorMgr(m_l, jPnlScriptlet);
    }

    protected JPnlPropertyMgr CreatePnlPropertyCodeletMgr()
    {
        return new JPnlPropertyMgr(m_l, jPnlScriptlet);
    }

    protected JPnlVariableMgr CreatePnlVariableCodeletMgr()
    {
        return new JPnlVariableMgr(m_l, jPnlScriptlet);
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Handler class for class addition">
    class ObjectAddHandler implements ActionListener
    {
        GuiAutomatableType m_t;
        public ObjectAddHandler(GuiAutomatableType t)
        {
            m_t = t;
        }

        @Override
        public void actionPerformed(ActionEvent e)
        {
            PObject obj = ConstructObject(m_t.GetClass(), "", "");
            obj.SetTempName();
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Selection and codelet interaction routines">
    /**
     * Internal method to update the list of selected objects
     */
    public PObject GetSelection() {return selection;}

    public void SetSelection(PObject newSel)
    {
	PropagateSelectionChange(newSel);
	SelectDefaultCodelet();
    }

    private void SelectDefaultCodelet()
    {
	if(selection == null)
            SelectBoundCodelets(null);
	else
            SelectBoundCodelets(selection);
    }

    private void PropagateSelectionChange(PObject newSel)
    {
        if(selection != null)
            selection.SetSelected(false);
	selection = newSel;
	if(selection != null)
            selection.SetSelected(true);

        eventMgr.BindObject(selection);
        methodMgr.BindObject(selection);
        controlMgr.BindObject(selection);
	operatorMgr.BindObject(selection);
        propertyMgr.BindObject(selection);

        jPnlScriptlet.Clear();
        jPnlScriptlet.BindObject(selection);
        pEngine.SetSelectedObject(selection);
        jPnlObjMgr.SetSelectedObject(selection);
    }

    protected class Pair
    {
	public PObject m_obj;
	public PEvent m_evt;
	public Pair(PObject obj, PEvent evt)
	{
            m_obj = obj;
            m_evt = evt;
	}
    }

    protected Pair GetDefaultObject()
    {
	PObject def = pEngine.GetDefaultObject();

        // no more default event: all edited PEvents have to show up
        // according to recorded coordinates in PEvent
        return new Pair(def, null);
    }

    public void SelectBoundCodelets(PObject pObj)
    {
	if(pObj == null)
            pObj = pEngine.GetDefaultObject();

        PropagateSelectionChange(pObj);

        for (PEventList evtList: pObj.GetEventLists())
            for(PEvent evt: evtList.GetPEvents())
                jPnlScriptlet.BindEvent(evt, null);
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Initialization, startup, and selection routines">
    public void DeferredInitialize()
    {
        // enable/disable various buttons/displays
        jButtonGoal1.setEnabled(bGoalImagesButtonEnabled);
        jButtonClear.setEnabled(bEraseDrawingButtonEnabled);
        jButtonDemo.setEnabled(bDemoImagesButtonEnabled);
        jLabelTime.setVisible(bTimerVisible);

        // Panel initialization:
        eventMgr = CreatePnlEventMgr();
        eventMgr.setAutoscrolls(true);
        eventPane = new JScrollPane(eventMgr);
        eventPane.setViewportView(eventMgr);
        methodMgr = CreatePnlMethodMgr();
        methodMgr.setAutoscrolls(true);
        methodPane = new JScrollPane(methodMgr);
        methodPane.setViewportView(methodMgr);
        controlMgr = CreatePnlControlMgr();
        controlMgr.setAutoscrolls(true);
        controlPane = new JScrollPane(controlMgr);
        controlPane.setViewportView(controlMgr);
        operatorMgr = CreatePnlOperatorMgr();
        operatorMgr.setAutoscrolls(true);
        operatorPane = new JScrollPane(operatorMgr);
        operatorPane.setViewportView(operatorMgr);
        propertyMgr = CreatePnlPropertyCodeletMgr();
        propertyMgr.setAutoscrolls(true);
        propertyCodeletPane = new JScrollPane(propertyMgr);
        propertyCodeletPane.setViewportView(propertyMgr);
        variableMgr = CreatePnlVariableCodeletMgr();
        variableMgr.setAutoscrolls(true);
        variableCodeletPane = new JScrollPane(variableMgr);
        variableCodeletPane.setViewportView(variableMgr);
        jPnlObjMgr.AddObject(pEngine);  // add default PEngine object
	jPnlObjMgr.SetParent(this);
       
        // Set up the tabs:
        Dimension d = new Dimension(65,20);

        JLabel methodTabText = new JLabel("<html><b>Methods</b></html>", JLabel.CENTER);
        methodTabText.setPreferredSize(d);
        jTabMain.addTab(null, methodPane);
        jTabMain.setTabComponentAt(0, methodTabText);
        jTabMain.setBackgroundAt(0, new Color(126,153,255));
        
        JLabel controlTabText = new JLabel("<html><b>Controls</b></html>", JLabel.CENTER);
        controlTabText.setPreferredSize(d);
        jTabMain.addTab(null, controlPane);
        jTabMain.setTabComponentAt(1, controlTabText);
        jTabMain.setBackgroundAt(1, new Color(234,199,33));

        JLabel eventTabText = new JLabel("<html><b>Events</b></html>", JLabel.CENTER);
        eventTabText.setPreferredSize(d);
        jTabMain.addTab(null, eventPane);
        jTabMain.setTabComponentAt(2, eventTabText);
        jTabMain.setBackgroundAt(2, new Color(140,196,111));

        JLabel operatorTabText = new JLabel("<html><b>Operators</b></html>", JLabel.CENTER);
        operatorTabText.setPreferredSize(d);
	jTabMain.addTab(null, operatorPane);
        jTabMain.setTabComponentAt(3, operatorTabText);
        jTabMain.setBackgroundAt(3, new Color(255,242,38));

        JLabel sensingTabText = new JLabel("<html><b>Sensing</b></html>", JLabel.CENTER);
        sensingTabText.setPreferredSize(d);
        jTabMain.addTab(null, propertyCodeletPane);
        jTabMain.setTabComponentAt(4, sensingTabText);
        jTabMain.setBackgroundAt(4, new Color(255,178,139));

        JLabel variableTabText = new JLabel("<html><b>Variables</b></html>", JLabel.CENTER);
        variableTabText.setPreferredSize(d);
        jTabMain.addTab(null, variableCodeletPane);
        jTabMain.setTabComponentAt(5, variableTabText);
        jTabMain.setBackgroundAt(5, new Color(255,113,253));

        jTabMain.setSelectedComponent(methodPane);

        // Create our canvas component:
        canvas = CreateCanvas();
        canvas.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
        
        // Add a listener to the container for the canvas to detect mouse enter and exit events to turn it on and off
        jPnlCanvas.addMouseListener(
        	new MouseListener() {
        		@Override
        		public void mouseClicked(MouseEvent e) {
        			if ((e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK) { 
        				if (canvas.isVisible()) {
        					canvas.setVisible(false);
        				} else {
        					canvas.setVisible(true);
        				}
        			}
        		}
        		@Override
        		public void mouseReleased(MouseEvent e) {}
        		@Override
        		public void mousePressed(MouseEvent e) {}
        		@Override
        		public void mouseEntered(MouseEvent e) {}
        		@Override
        		public void mouseExited(MouseEvent e) {}		
        	}
        );
        
        
        
        // Add a mouse listener:
        canvas.addMouseListener(
            new MouseListener()
            {
                @Override
                public void mouseClicked(MouseEvent e)
                {
                    int x = e.getX();
                    int y = e.getY();

                    final PObject obj = Pick(x, y);
                    boolean bPEngineSelected = false;
                    if(obj == null)
                    // Do NOT select the background pEngine object by default
                    {
                        return;
                        ////SetSelection(pEngine);
                        ////bPEngineSelected = true;
                    }
                    else
			SetSelection(obj);

                    // if right click then present a menu
                    // NOTE: Currently disable the use of PopupMenu when Graphic2D
                    // is used as the graphic engine.
                    if (!(pEngine instanceof pCSDT.Presentation.Graphics2D.PEngineG2D) && !bPEngineSelected && e.isMetaDown()) {
                        ButtonGroup buttonGroup = new ButtonGroup();
                        JPopupMenu popupMenu = new JPopupMenu();
                        final JRadioButtonMenuItem items[] = new JRadioButtonMenuItem[2];
                        // construct each menu item and add to popup menu;
                        // also enable event handling for each menu item
                        items[0] = new JRadioButtonMenuItem("Delete");
                        popupMenu.add(items[0]);
                        buttonGroup.add(items[0]);
                        items[0].addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent event) {
                                if (event.getSource() == items[0]) {
                                    RemoveObject(obj);
                                    // set selection to default object
                                    SetSelection(GetDefaultObject().m_obj);
                                }
                            }
                        });
                        items[1] = new JRadioButtonMenuItem("Duplicate");
                        popupMenu.add(items[1]);
                        buttonGroup.add(items[1]);
                        items[1].addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent event) {
                                if (event.getSource() == items[1]) {
                                    GuiAutomatableType t = GuiAutomatableType.Get(obj.getClass());
                                    //PObject obj = ConstructObject(t.GetClass(), "", "");
                                    PObject obj2 = DuplicateObject(obj);
                                    obj2.SetTempName();
                                    // set selection to duplicated object
                                    SetSelection(obj2);
                                }
                            }
                        });
                        popupMenu.show(e.getComponent(), e.getX(), e.getY());
                    }
                }
                @Override
                public void mouseEntered(MouseEvent e) {}
                @Override
                public void mouseExited(MouseEvent e) {}
                @Override
                public void mousePressed(MouseEvent e) {
                	if ((e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK) { 
                		canvas.setVisible(false);
                	}
                }
                @Override
                public void mouseReleased(MouseEvent e) {}
            }
        );

        CanvasMouseMotionListener canvasMouseMotionListener =
                new CanvasMouseMotionListener(this);
        canvas.addMouseMotionListener(canvasMouseMotionListener);

        CanvasMouseListener canvasMouseListener =
                new CanvasMouseListener(this);
        canvas.addMouseListener(canvasMouseListener);

        // Set up our layouts:
        org.jdesktop.layout.GroupLayout gLJPanel1Layout = new org.jdesktop.layout.GroupLayout(canvas);
        canvas.setLayout(gLJPanel1Layout);
        gLJPanel1Layout.setHorizontalGroup(
            gLJPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 650, Short.MAX_VALUE)
        );
        gLJPanel1Layout.setVerticalGroup(
            gLJPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 800, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPnlCanvasLayout = new org.jdesktop.layout.GroupLayout(jPnlCanvas);
        jPnlCanvas.setLayout(jPnlCanvasLayout);
        jPnlCanvasLayout.setHorizontalGroup(
            jPnlCanvasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(canvas, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPnlCanvasLayout.setVerticalGroup(
            jPnlCanvasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(canvas, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPnlCanvas.add(canvas);

        addKeyListener(new KeyListener() {
            public final void keyPressed(KeyEvent event) {
                // respond only when simulation is happening
                if (renderState == eRenderState.Animating) {
                    OnKeyPressed(event);
                }
            }

            public final void keyReleased(KeyEvent event) {
                if (renderState == eRenderState.Animating) {
                    OnKeyReleased(event);
                }
            }

            public final void keyTyped(KeyEvent event) {
                if (renderState == eRenderState.Animating) {
                    OnKeyTyped(event);
                }
            }
        });

        // Default codelet selection is the last thing we do:
        SelectBoundCodelets(null);
        bDeferredInitialized = true;

        // set up the robot that takes screenshot
        if (robot == null) {
            try {
                robot = new java.awt.Robot();
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Define how the mouse display format string is formatted
     * @param x mouse location x
     * @param y mouse location y
     * @param z mouse location z
     */
    public String DisplayMouseLocation(double x, double y, double z)
    {
        return "[" + mouseCoordFormat.format(x) + ", " + mouseCoordFormat.format(y) + ", " + mouseCoordFormat.format(z) + "]";
    }

    /**
     * To be called if the UI needs to go through its own parameters again to
     * reorganize itself
     */
    public void UpdateUI() {
        jPnlCanvas.setPreferredSize(
                new Dimension((int)(GetCanvasPreferredRelativeWidth()*400),
                              (int)(GetCanvasPreferredRelativeHeight()*400)));
        jPnlCanvas.setSize(
                new Dimension((int)(GetCanvasPreferredRelativeWidth()*400),
                              (int)(GetCanvasPreferredRelativeHeight()*400)));
        jScrollPane4.validate();
    }

    public abstract float GetCanvasPreferredRelativeWidth();

    public abstract float GetCanvasPreferredRelativeHeight();

    /** Initializes the applet GUI */
    @Override
    public void init()
    {
        // set this if you wish to load a single XML file as both default and
        // the only menu item in Load Demo menu
        //String defaultScriptStr = getParameter("SingleDemoXmlUrl");

        // default split locations of the splitpanes
        String mainSplitLocStr = getParameter("MainSplitLoc");
        String leftSplitLocStr = getParameter("LeftSplitLoc");
        String rightSplitLocStr = getParameter("RightSplitLoc");

        // use the .properties format if multiple demos are to be loaded into
        // the program
        // name, location and desc of default background images
        // set demo propertiesStr and goalImgPropertiesStr
        // if these info is provided as applet parameters
        
        //Pull demos from a folder
        //demosFolder is where demos currently exist
        URL url = null;
        File f = null;
        try {
            //url = new URL("http://www.ccd.rpi.edu/eglash/csdt/pcsdt/Animator/demos/Demos.txt");
            //This will not work on local machine
           
            if(this.getCodeBase().toString().startsWith("http://") || this.getCodeBase().toString().startsWith("https://")){ //working in a web browser
                codebaseURL = new URL(this.getCodeBase() + ""); //Save this address for PEngine to use when saving the xml
                pCSDT.Scripting.PEngine.codebaseURL = codebaseURL;
                System.out.println("URL HERE IS " + codebaseURL);
                url = new URL(this.getCodeBase() + "demos/Demos.txt");
            }
            else{ //local machine
                System.out.println("Codebase HERE IS " + codebaseURL);
                f = new File("C:/Users/Public/demos/Demos.txt");
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
//        if (getParameter("DemoPropertiesUrl") != null) {
//            demoPropertiesStr = getParameter("DemoPropertiesUrl");
//        }
        if (getParameter("SingleDemoXmlUrl") != null) {
            singleDemoXmlStr = getParameter("SingleDemoXmlUrl");
        }
        if (getParameter("TemplateBackgroundPropertiesUrl") != null) {
            BGImgPropertiesStr = getParameter("TemplateBackgroundPropertiesUrl");
        }
        if (getParameter("GoalImagesPropertiesUrl") != null){
            goalImgPropertiesStr = getParameter("GoalImagesPropertiesUrl");
        }
        if (getParameter("demoImgPropertiesStrUrl") != null){
            demoImgPropertiesStr = getParameter("demoImgPropertiesStrUrl");
        }
        // code to adjust the default font face and size
        UIDefaults defaults = UIManager.getDefaults();
        Enumeration keys = defaults.keys();
        Font plainTahoma = new Font("Tahoma", Font.PLAIN, 11);
        Font smallPlainTahoma = new Font("Tahoma", Font.PLAIN, 10);
        Font boldTahoma = new Font("Tahoma", Font.BOLD, 11);
        Font bigBoldTahoma = new Font("Tahoma", Font.BOLD, 11);
        Font boldSerif = new Font("Sansserif", Font.BOLD, 11);
        Font bigCenturyGothic = new Font("Century Gothic", Font.BOLD, 12);
        while(keys.hasMoreElements()) {
            Object key = keys.nextElement();
            Object value = defaults.get(key);
            if (value instanceof javax.swing.plaf.FontUIResource) {
                UIManager.put("Label.font", plainTahoma);
                UIManager.put("Button.font", boldTahoma);
                UIManager.put("TextField.font", smallPlainTahoma);
                UIManager.put("RadioButton.font", plainTahoma);
                UIManager.put("RadioButtonMenu.font", plainTahoma);
                UIManager.put("TabbedPane.font", bigBoldTahoma);
                UIManager.put("TableHeader.font",boldTahoma);
                UIManager.put("Table.font", plainTahoma);
                UIManager.put("List.font",plainTahoma);
                UIManager.put("PopupMenu.font",plainTahoma);
                UIManager.put("PopupMenuItem.font", plainTahoma);
                UIManager.put("ComboBox.font",plainTahoma);
                UIManager.put("ComboBoxItem.font",plainTahoma);
                UIManager.put("Menu.font", boldTahoma);
                UIManager.put("MenuItem.font", plainTahoma);
            }    
         }
         
        Window window = SwingUtilities.windowForComponent(this);
        if (window instanceof JFrame) {
            JFrame frame = (JFrame)window;
            if (!frame.isResizable()) {
                frame.setResizable(true);
            }
        }
        initComponents();
        DeferredInitialize();

        // load demo menu items
        int demoNum = -1;
        int defaultNum = -1;
        String[] nameStrings = null;
        String[] srcStrings = null;
        String[] descStrings = null;

        if (singleDemoXmlStr != null && !singleDemoXmlStr.equals("")) {
            demoNum = 1;
            defaultNum = 0;
            nameStrings = new String[demoNum];
            nameStrings[0] = "Default";
            srcStrings = new String[demoNum];
            srcStrings[0] = singleDemoXmlStr;
            descStrings = new String[demoNum];
            descStrings[0] = "";
            JMenuItem item = new JMenuItem(nameStrings[0]);
            item.setToolTipText(descStrings[0]);
            DemoMenuItemActionListener al = new DemoMenuItemActionListener(this, srcStrings[0]);
            item.addActionListener(al);
            jMenuLoadDemo.add(item);
        }
        else {
            // load the demos to the menu if there is any
                Properties prop = new Properties();
                InputStream obj = null;
                try {
//                    if (demoPropertiesStr.startsWith("http://")) {
                    if(url != null) obj = url.openStream();
                    else if(f != null) obj = new FileInputStream(f);
//                    }
//                    else {
//                        obj = this.getClass().getResourceAsStream(demoPropertiesStr);
//                    }
                    if (obj != null) {
                        obj = new BufferedInputStream(obj);
                        prop.load(obj);
                    }
                    else {
                        System.out.println("Error");
                    }
                }
                catch (Exception e) {
                    e.printStackTrace();
                }
                demoNum = Integer.parseInt(prop.getProperty("number").trim());
                defaultNum = Integer.parseInt(prop.getProperty("default").trim());
                nameStrings = new String[demoNum];
                srcStrings = new String[demoNum];
                descStrings = new String[demoNum];
                NumberFormat digit3 = new DecimalFormat("000");
                for (int i = 0; i < demoNum; i++) {
                    String demoCodeNum = "Demo" + digit3.format(i);
                    nameStrings[i] = prop.getProperty(demoCodeNum + ".name");
                    srcStrings[i] = prop.getProperty(demoCodeNum + ".loc");
                    descStrings[i] = prop.getProperty(demoCodeNum + ".desc");
                    JMenuItem item = new JMenuItem(nameStrings[i]);
                    item.setToolTipText(descStrings[i]);
                    DemoMenuItemActionListener al = new DemoMenuItemActionListener(this, srcStrings[i]);
                    item.addActionListener(al);
                    jMenuLoadDemo.add(item);
                }
            }

        // load the default script if there is any
        if (defaultNum >= 0 && defaultNum < demoNum) {
            try {
                ClearEngine();
                if (srcStrings[defaultNum].startsWith("http://")) {
                    LoadFromXml(Utility.FormatURL(srcStrings[defaultNum]));
                }
                else {
                    LoadFromXml(this.getClass().getResource(srcStrings[defaultNum]));
                }
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }
        
        // adjust the splitpane locations
        if (mainSplitLocStr != null) {
            try {
                jSplitPaneMain.setDividerLocation(Integer.parseInt(mainSplitLocStr));
            }
            catch (Exception e) {}
        }

        if (leftSplitLocStr != null) {
            try {
                jSplitPaneLeft.setDividerLocation(Integer.parseInt(leftSplitLocStr));
            }
            catch (Exception e) {}
        }

        if (rightSplitLocStr != null) {
            try {
                jSplitPaneRight.setDividerLocation(Integer.parseInt(rightSplitLocStr));
            }
            catch (Exception e) {}
        }
        UpdateUI();  // make sure scrollbar4 provides scrolling facility 
    }
	// </editor-fold>

    // Accessor methods:
    public eGridStyle GetGridStyle() {return gridStyle;}
    public void usePolarBackground(){
        gridStyle = eGridStyle.Polar;
    }
    public void useCartesianBackground(){
        gridStyle = eGridStyle.Cartesian;
    }
    public eRenderState GetRenderState() {return renderState;}

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     * These can be modified from the Form Editor or Palette.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GUIGetNameDesc = new javax.swing.JDialog();
        jButton1 = new javax.swing.JButton();
        jLblName = new javax.swing.JLabel();
        jLblDesc = new javax.swing.JLabel();
        jTxtName = new javax.swing.JTextField();
        jTxtDesc = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        list1 = new java.awt.List();
        jButton2 = new javax.swing.JButton();
        jSplitPaneMain = new javax.swing.JSplitPane();
        jSplitPaneLeft = new javax.swing.JSplitPane();
        jTabMain = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane3.getHorizontalScrollBar().setUnitIncrement(20);
        jScrollPane3.getVerticalScrollBar().setUnitIncrement(20);
        jSplitPaneRight = new javax.swing.JSplitPane();
        jPanelCanva = new javax.swing.JPanel();
        jPanelCanvasInfo = new javax.swing.JPanel();
        jPanelButtonGrp = new javax.swing.JPanel();
        jBtnRun = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jButtonGoal = new javax.swing.JButton();
        jButtonGoal1 = new javax.swing.JButton();
        jButtonResize = new javax.swing.JButton();
        jButtonShot = new javax.swing.JButton();
        jButtonDemo = new javax.swing.JButton();
        jPanelButtonGrp1 = new javax.swing.JPanel();
        jButtonCommunity = new javax.swing.JButton();
        jPanelStatus = new javax.swing.JPanel();
        jPanelInfo1 = new javax.swing.JPanel();
        jLabelMouseLoc = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jPanelTime = new javax.swing.JPanel();
        jLabelTime = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPnlCanvas = new javax.swing.JPanel();
        jPnlObjMgr = new pCSDT.Presentation.JPnlObjMgr(pEngine);
        jMnuTop = new javax.swing.JMenuBar();
        jMnuFile = new javax.swing.JMenu();
        jMnuFileNew = new javax.swing.JMenuItem();
        jMnuFileOpen = new javax.swing.JMenuItem();
        jMnuFileSave = new javax.swing.JMenuItem();
        jMnuFileSaveAs = new javax.swing.JMenuItem();
        jMenuLoadDemo = new javax.swing.JMenu();

        GUIGetNameDesc.setName(""); // NOI18N

        jButton1.setText("Ok");
        jButton1.setActionCommand("OnGetNameDescOk");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLblName.setText("Name");

        jLblDesc.setText("Description");

        jTextArea2.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea2.setColumns(1);
        jTextArea2.setEditable(false);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(1);
        jTextArea2.setText("Enter the name and, optionally, a description for this object");
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setBorder(null);
        jTextArea2.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane2.setViewportView(jTextArea2);

        org.jdesktop.layout.GroupLayout GUIGetNameDescLayout = new org.jdesktop.layout.GroupLayout(GUIGetNameDesc.getContentPane());
        GUIGetNameDesc.getContentPane().setLayout(GUIGetNameDescLayout);
        GUIGetNameDescLayout.setHorizontalGroup(
            GUIGetNameDescLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(GUIGetNameDescLayout.createSequentialGroup()
                .addContainerGap()
                .add(GUIGetNameDescLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, GUIGetNameDescLayout.createSequentialGroup()
                        .add(jLblName)
                        .add(30, 30, 30)
                        .add(jTxtDesc, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, GUIGetNameDescLayout.createSequentialGroup()
                        .add(jLblDesc)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTxtName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton1))
                .addContainerGap())
        );
        GUIGetNameDescLayout.setVerticalGroup(
            GUIGetNameDescLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(GUIGetNameDescLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(GUIGetNameDescLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLblName)
                    .add(jTxtDesc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(GUIGetNameDescLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTxtName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLblDesc))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jButton1))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        list1.setVisible(false);

        jButton2.setText("jButton2");

        setStub(null);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jSplitPaneMain.setMinimumSize(new java.awt.Dimension(0, 0));
        jSplitPaneMain.setOneTouchExpandable(true);
        jSplitPaneMain.setPreferredSize(new java.awt.Dimension(937, 550));

        jSplitPaneLeft.setMinimumSize(new java.awt.Dimension(0, 3));
        jSplitPaneLeft.setPreferredSize(new java.awt.Dimension(430, 7));

        jTabMain.setBackground(new java.awt.Color(205, 205, 205));
        jTabMain.setMinimumSize(new java.awt.Dimension(0, 0));
        jTabMain.setPreferredSize(new java.awt.Dimension(180, 5));
        jSplitPaneLeft.setLeftComponent(jTabMain);

        jScrollPane3.setBackground(new java.awt.Color(205, 205, 205));
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setAutoscrolls(true);
        jScrollPane3.setDoubleBuffered(true);
        jScrollPane3.setMaximumSize(new java.awt.Dimension(32768, 32768));
        jScrollPane3.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(200, 2));
        jSplitPaneLeft.setRightComponent(jScrollPane3);

        jSplitPaneMain.setLeftComponent(jSplitPaneLeft);
        jPnlScriptlet = new pCSDT.Presentation.JPnlScriptlet(m_l);
        jPnlScriptlet.setAutoscrolls(true);
        jPnlScriptlet.setMinimumSize(new java.awt.Dimension(256,24));
        jScrollPane3.setViewportView(jPnlScriptlet);

        jSplitPaneRight.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPaneRight.setResizeWeight(1.0);
        jSplitPaneRight.setMinimumSize(new java.awt.Dimension(0, 0));
        jSplitPaneRight.setOneTouchExpandable(true);
        jSplitPaneRight.setPreferredSize(new java.awt.Dimension(500, 600));

        jPanelCanva.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanelCanva.setPreferredSize(new java.awt.Dimension(400, 350));
        jPanelCanva.setLayout(new java.awt.BorderLayout());

        jPanelCanvasInfo.setMinimumSize(new java.awt.Dimension(350, 14));
        jPanelCanvasInfo.setPreferredSize(new java.awt.Dimension(27, 30));
        jPanelCanvasInfo.setLayout(new javax.swing.BoxLayout(jPanelCanvasInfo, javax.swing.BoxLayout.LINE_AXIS));

        jPanelButtonGrp.setMinimumSize(new java.awt.Dimension(180, 30));
        jPanelButtonGrp.setPreferredSize(new java.awt.Dimension(180, 30));
        jPanelButtonGrp.setLayout(new java.awt.GridLayout(1, 0));

        jBtnRun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/aniplay20.gif"))); // NOI18N
        jBtnRun.setToolTipText("BEGIN");
        jBtnRun.setFocusable(false);
        jBtnRun.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtnRun.setMaximumSize(new java.awt.Dimension(30, 30));
        jBtnRun.setMinimumSize(new java.awt.Dimension(30, 30));
        jBtnRun.setPreferredSize(new java.awt.Dimension(30, 30));
        jBtnRun.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBtnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRunActionPerformed(evt);
            }
        });
        jPanelButtonGrp.add(jBtnRun);

        jButtonClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/clear.png"))); // NOI18N
        jButtonClear.setToolTipText("CLEAR DRAWING");
        jButtonClear.setFocusable(false);
        jButtonClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonClear.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonClear.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonClear.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonClear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });
        jPanelButtonGrp.add(jButtonClear);

        jButtonGoal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/bgImage.png"))); // NOI18N
        jButtonGoal.setToolTipText("BACKGROUND");
        jButtonGoal.setFocusable(false);
        jButtonGoal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonGoal.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonGoal.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonGoal.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonGoal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonGoal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGoalActionPerformed(evt);
            }
        });
        jPanelButtonGrp.add(jButtonGoal);

        jButtonGoal1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/goal.png"))); // NOI18N
        jButtonGoal1.setToolTipText("GOAL IMAGE");
        jButtonGoal1.setFocusable(false);
        jButtonGoal1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonGoal1.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonGoal1.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonGoal1.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonGoal1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonGoal1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonGoal1MouseClicked(evt);
            }
        });
        jButtonGoal1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGoal1ActionPerformed(evt);
            }
        });
        jPanelButtonGrp.add(jButtonGoal1);

        jButtonResize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/scalefull.png"))); // NOI18N
        jButtonResize.setToolTipText("EXPAND GRAPHICS VIEW");
        jButtonResize.setFocusable(false);
        jButtonResize.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonResize.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonResize.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonResize.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonResize.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonResize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResizeActionPerformed(evt);
            }
        });
        jPanelButtonGrp.add(jButtonResize);

        jButtonShot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/shot.png"))); // NOI18N
        jButtonShot.setToolTipText("SCREENSHOT");
        jButtonShot.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonShot.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonShot.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShotActionPerformed(evt);
            }
        });
        jPanelButtonGrp.add(jButtonShot);

        jButtonDemo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/Demo.png"))); // NOI18N
        jButtonDemo.setToolTipText("Demo");
        jButtonDemo.setFocusable(false);
        jButtonDemo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonDemo.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonDemo.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonDemo.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonDemo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonDemo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDemoMouseClicked(evt);
            }
        });
        jButtonDemo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDemoActionPerformed(evt);
            }
        });
        jPanelButtonGrp.add(jButtonDemo);

        jPanelCanvasInfo.add(jPanelButtonGrp);

        jPanelButtonGrp1.setMinimumSize(new java.awt.Dimension(180, 30));
        jPanelButtonGrp1.setPreferredSize(new java.awt.Dimension(90, 30));
        jPanelButtonGrp1.setLayout(new java.awt.BorderLayout());

        jButtonCommunity.setIcon(null);
        jButtonCommunity.setText("Community");
        jButtonCommunity.setToolTipText("Be sure to allow popup windows!");
        jButtonCommunity.setFocusable(false);
        jButtonCommunity.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jButtonCommunity.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButtonCommunity.setMaximumSize(new java.awt.Dimension(120, 30));
        jButtonCommunity.setMinimumSize(new java.awt.Dimension(120, 30));
        jButtonCommunity.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonCommunity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCommunityMouseClicked(evt);
            }
        });
        jButtonCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCommunityActionPerformed(evt);
            }
        });
        jPanelButtonGrp1.add(jButtonCommunity, java.awt.BorderLayout.CENTER);

        jPanelCanvasInfo.add(jPanelButtonGrp1);

        jPanelStatus.setMinimumSize(new java.awt.Dimension(200, 28));
        jPanelStatus.setPreferredSize(new java.awt.Dimension(200, 40));
        jPanelStatus.setLayout(new java.awt.BorderLayout(5, 5));

        jPanelInfo1.setLayout(new java.awt.GridLayout(2, 1));

        jLabelMouseLoc.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelMouseLoc.setText("   ");
        jPanelInfo1.add(jLabelMouseLoc);

        jLabelStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanelInfo1.add(jLabelStatus);

        jPanelStatus.add(jPanelInfo1, java.awt.BorderLayout.CENTER);

        jPanelTime.setPreferredSize(new java.awt.Dimension(70, 30));
        jPanelTime.setLayout(new java.awt.GridLayout(1, 0, 3, 3));

        jLabelTime.setFont(new java.awt.Font("Tahoma", 0, 18));
        jLabelTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTime.setText("0.00s");
        jLabelTime.setAlignmentX(0.5F);
        jLabelTime.setDoubleBuffered(true);
        jPanelTime.add(jLabelTime);

        jPanelStatus.add(jPanelTime, java.awt.BorderLayout.EAST);

        jPanelCanvasInfo.add(jPanelStatus);

        jPanelCanva.add(jPanelCanvasInfo, java.awt.BorderLayout.NORTH);

        jPnlCanvas.setMinimumSize(new java.awt.Dimension(350, 350));
        jPnlCanvas.setPreferredSize(new java.awt.Dimension(400, 400));

        org.jdesktop.layout.GroupLayout jPnlCanvasLayout = new org.jdesktop.layout.GroupLayout(jPnlCanvas);
        jPnlCanvas.setLayout(jPnlCanvasLayout);
        jPnlCanvasLayout.setHorizontalGroup(
            jPnlCanvasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 601, Short.MAX_VALUE)
        );
        jPnlCanvasLayout.setVerticalGroup(
            jPnlCanvasLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );

        jScrollPane4.setViewportView(jPnlCanvas);

        jPanelCanva.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jSplitPaneRight.setTopComponent(jPanelCanva);

        jPnlObjMgr.setMinimumSize(new java.awt.Dimension(300, 0));
        jPnlObjMgr.setPreferredSize(new java.awt.Dimension(400, 170));
        jSplitPaneRight.setBottomComponent(jPnlObjMgr);

        jSplitPaneMain.setRightComponent(jSplitPaneRight);

        getContentPane().add(jSplitPaneMain, java.awt.BorderLayout.CENTER);

        jMnuFile.setText("File");

        jMnuFileNew.setMnemonic('n');
        jMnuFileNew.setText("New");
        jMnuFileNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuFileNewActionPerformed(evt);
            }
        });
        jMnuFile.add(jMnuFileNew);

        jMnuFileOpen.setMnemonic('O');
        jMnuFileOpen.setText("Open");
        jMnuFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuFileOpenActionPerformed(evt);
            }
        });
        jMnuFile.add(jMnuFileOpen);

        jMnuFileSave.setMnemonic('S');
        jMnuFileSave.setText("Save");
        jMnuFileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuFileSaveActionPerformed(evt);
            }
        });
        jMnuFile.add(jMnuFileSave);

        jMnuFileSaveAs.setMnemonic('A');
        jMnuFileSaveAs.setText("Save As");
        jMnuFileSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuFileSaveAsActionPerformed(evt);
            }
        });
        jMnuFile.add(jMnuFileSaveAs);

        jMnuTop.add(jMnuFile);

        jMenuLoadDemo.setText("Load Demo");
        jMnuTop.add(jMenuLoadDemo);

        setJMenuBar(jMnuTop);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        GUIGetNameDesc.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    protected void PauseRendering()
    {
        renderState = eRenderState.Stopped;
        jBtnRun.setText("RESUME");
    }

    public void EndRendering()
    {
	pEngine.InvokeEnd();
	renderState = eRenderState.Stopped;
        //bSimulationStarted = false;
        //pEngine.Reset();
        jBtnRun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/play.png"))); // NOI18N
        jBtnRun.setToolTipText("BEGIN");
	////jBtnRun.setText("BEGIN");
    }

    private void jBtnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRunActionPerformed
	// free available memory before/after simulation
        ////Runtime r = Runtime.getRuntime();
        ////r.gc();
        /*
        switch(renderState)
		{
		case Animating:
			PauseRendering();
			break;
		case Stopped:
			jBtnRun.setText("PAUSE");
            // reset and restart only if bSimulation
            if (!bSimulationStarted) {
                try
                {
                    renderState = eRenderState.Animating;
                    pEngine.InvokeBegin();
                    bSimulationStarted = true;
                }
                catch(Exception ex)
                {JOptionPane.showMessageDialog(this, new String(" Error: invalid codelet value(s) or arrangement"));}
            }
            else {
                renderState = eRenderState.Animating;
            }
            break;
		}
        */
        switch(renderState)
        {
            case Animating:
                EndRendering();
                pEngine.InvokeEnd();
                break;
            case Stopped:
                renderState = eRenderState.Animating;
                requestFocus();
                jBtnRun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/stop.png"))); // NOI18N
                jBtnRun.setToolTipText("STOP");
                needsToDraw = true;
                ////jBtnRun.setText("STOP");
                try
                {
                    pEngine.Reset();
                    pEngine.InvokeBegin();
                   
                }
                catch(Exception ex)
                {JOptionPane.showMessageDialog(this, " Error: invalid codelet value(s) or arrangement");}
                break;
        }
    }//GEN-LAST:event_jBtnRunActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        invalidate();
    }//GEN-LAST:event_formComponentResized

    public void SaveDocument(String name)
    {
        // capture the screen as a bufferedimage
        // use the following line for the whole screen
        ////Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
        // use the following to keep the simulation canvas area only
        Point topLeft = jPnlCanvas.getLocationOnScreen();
        Dimension size = jPnlCanvas.getSize();
        Rectangle screenRect = new Rectangle(topLeft.x, topLeft.y, size.width, size.height);
        BufferedImage capture = robot.createScreenCapture(screenRect);
        // scale the captured image down to thumbnail size
        int thumbnail_width = 96;
        int thumbnail_height = thumbnail_width;
        Image scaledImage = capture.getScaledInstance(thumbnail_width, thumbnail_height, Image.SCALE_FAST);
        BufferedImage thumbnail = new BufferedImage(thumbnail_width, thumbnail_height, BufferedImage.TYPE_INT_RGB);
        Graphics g = thumbnail.createGraphics();
        g.drawImage(scaledImage, 0, 0, null);
        g.dispose();
	// Execute a save on the engine:
	try
	{
            //write the icon to a file for debugging
            //File file = new File("debug.png");
            //ImageIO.write(thumbnail, "png", file);
            //set the thumbnail image icon
            //pEngine.SetThumbnailImage(thumbnail, "png");
            pEngine.SaveXml(name);
	}
	catch(IOException e)
	{
            e.printStackTrace();
            return;
	}
	m_savePath = name;
    }

	private void jMnuFileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuFileSaveActionPerformed
            if(m_savePath.equals(""))
		jMnuFileSaveAsActionPerformed(evt);
            else
		SaveDocument(m_savePath);
	}//GEN-LAST:event_jMnuFileSaveActionPerformed

	private void jMnuFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuFileOpenActionPerformed
            JFileChooser chooser = new JFileChooser();
            chooser.addChoosableFileFilter(new CsdtFileFilter());
            chooser.setAcceptAllFileFilterUsed(false);
            //chooser.setFileFilter(new CsdtFileFilter());
            if(chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
            {
                File pickedFile = chooser.getSelectedFile();
                // do thing only when a file is selected.
                if (pickedFile != null) {
                    String path = pickedFile.getAbsolutePath();
                    File file = new File(path);
                    URL url = null;
                    try {
                        url = file.toURI().toURL();
                    }
                    catch (Exception e) {
                        e.printStackTrace();
                    }
                    // Clear the engine:
                    ClearEngine();
                    if(LoadFromXml(url))
                    {
                        m_savePath = path;
                    }
                }
            }
	}//GEN-LAST:event_jMnuFileOpenActionPerformed

	private void jMnuFileSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuFileSaveAsActionPerformed
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new CsdtFileFilter());
            if(chooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION)
		return;

            // Determine what the user wanted to save:
            File x = chooser.getSelectedFile();
            if(CsdtFileFilter.getExtension(x).isEmpty())
		SaveDocument(x.getAbsolutePath() + ".xml");
            else
		SaveDocument(x.getAbsolutePath());
	}//GEN-LAST:event_jMnuFileSaveAsActionPerformed

	protected void ClearEngine()
	{
            if(renderState == eRenderState.Animating)
		EndRendering();

            pEngine.Reset();
            pEngine.Clear();
	}

	private void jMnuFileNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuFileNewActionPerformed
		
        // Clear the engine:
        ClearEngine();

	// Clear anything selected in the scriptlet window:
	SetSelection(pEngine);

	// Reinitialize the engine:
        pEngine.DeferredInitialize();
        jPnlObjMgr.ReloadObjects(pEngine);
	m_savePath = "";

        // Set the engine as the default selected object
        SelectBoundCodelets(pEngine);
            
	}//GEN-LAST:event_jMnuFileNewActionPerformed

	private void formComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentShown
	{//GEN-HEADEREND:event_formComponentShown
		if (!bDeferredInitialized) {
            DeferredInitialize();
        }
	}//GEN-LAST:event_formComponentShown

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:
        pEngine.ClearDrawing();
        needsToDraw = true;
       
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonGoalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGoalActionPerformed
        // TODO add your handling code here:
        BGImageJPanel.createAndShowGUI(this, BGImgPropertiesStr);
    }//GEN-LAST:event_jButtonGoalActionPerformed

    private void jButtonResizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResizeActionPerformed
        if (jButtonResize.getToolTipText().equals("EXPAND GRAPHICS VIEW")) {
            /*
            // expand the graphic windows by the same amount
            int width = getWidth();
            int height = getHeight();
            int maxsize = Math.min(width, height);
            
            jSplitPaneMain.setDividerLocation(width-maxsize);
            jSplitPaneRight.setDividerLocation(maxsize);
             *
             */

            // back up splitter locations
            mainSplitterLoc = (double)jSplitPaneMain.getDividerLocation()/jSplitPaneMain.getWidth();
            rightSplitterLoc = (double)jSplitPaneRight.getDividerLocation()/jSplitPaneRight.getHeight();

            // expand to full screen
            jSplitPaneMain.setDividerLocation(0);
            jSplitPaneRight.setDividerLocation(getHeight());

            jButtonResize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/scalecollapse.png"))); // NOI18N
            jButtonResize.setToolTipText("REDUCE GRAPHICS VIEW");
        }
        else {
            /*
            // reset to factory default
            jSplitPaneMain.setDividerLocation(-1);
            jSplitPaneRight.setDividerLocation(-1);
            */
            // recover the backup splitter locations
            jSplitPaneMain.setDividerLocation(mainSplitterLoc);
            jSplitPaneRight.setDividerLocation(rightSplitterLoc);

            jButtonResize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/scalefull.png"))); // NOI18N
            jButtonResize.setToolTipText("EXPAND GRAPHICS VIEW");
        }
    }//GEN-LAST:event_jButtonResizeActionPerformed

    private void jButtonShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShotActionPerformed

        // capture the screen as a bufferedimage
        // use the following line for the whole screen
        ////Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
        // use the following to keep the simulation canvas area only
        Point topLeft = jPnlCanvas.getLocationOnScreen();
        Dimension size = jPnlCanvas.getSize();
        Rectangle screenRect = new Rectangle(topLeft.x, topLeft.y, size.width, size.height);
        ////
        
        try {
            BufferedImage capture = robot.createScreenCapture(screenRect);
            // select where you want to save your screenshot
            JFileChooser chooser = new JFileChooser();
            chooser.addChoosableFileFilter(pngFileFilter);
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setFileFilter(pngFileFilter);
            if(chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
            {
                File pickedFile = chooser.getSelectedFile();

                // do thing only when a file is selected.
                if (pickedFile != null) {
                    // add back the extension if it is missing
                    String path = null;
                    if (PngFileFilter.getExtension(pickedFile).isEmpty()) {
                        path = pickedFile.getAbsolutePath() + ".png";
                    }
                    else {
                        path = pickedFile.getAbsolutePath();
                    }
                    File file = new File(path);
                    // write it out
                    ImageIO.write(capture, "png", file);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButtonShotActionPerformed

    private void jButtonGoal1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGoal1ActionPerformed
        // TODO add your handling code here:
        try{
          GoalImageJPanel.createAndShowGUI(this, goalImgPropertiesStr);
        }
        catch (Exception ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonGoal1ActionPerformed

    private void jButtonGoal1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonGoal1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonGoal1MouseClicked

    private void jButtonDemoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDemoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonDemoMouseClicked

    private void jButtonDemoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDemoActionPerformed
 try{
          DemoJPanel.createAndShowGUI(this, demoImgPropertiesStr);
        }
        catch (Exception ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }    }//GEN-LAST:event_jButtonDemoActionPerformed

    private void jButtonCommunityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCommunityMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonCommunityMouseClicked

    private void jButtonCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCommunityActionPerformed
        
        String link = "http://www.community.csdt.rpi.edu";
       
            try {
            try {
                java.awt.Desktop.getDesktop().browse(new URI(link));
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            } catch (URISyntaxException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        
       
    }//GEN-LAST:event_jButtonCommunityActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog GUIGetNameDesc;
    private javax.swing.JButton jBtnRun;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonCommunity;
    private javax.swing.JButton jButtonDemo;
    private javax.swing.JButton jButtonGoal;
    private javax.swing.JButton jButtonGoal1;
    private javax.swing.JButton jButtonResize;
    private javax.swing.JButton jButtonShot;
    private javax.swing.JLabel jLabelMouseLoc;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelTime;
    private javax.swing.JLabel jLblDesc;
    private javax.swing.JLabel jLblName;
    private javax.swing.JMenu jMenuLoadDemo;
    private javax.swing.JMenu jMnuFile;
    private javax.swing.JMenuItem jMnuFileNew;
    private javax.swing.JMenuItem jMnuFileOpen;
    private javax.swing.JMenuItem jMnuFileSave;
    private javax.swing.JMenuItem jMnuFileSaveAs;
    private javax.swing.JMenuBar jMnuTop;
    private javax.swing.JPanel jPanelButtonGrp;
    private javax.swing.JPanel jPanelButtonGrp1;
    private javax.swing.JPanel jPanelCanva;
    private javax.swing.JPanel jPanelCanvasInfo;
    private javax.swing.JPanel jPanelInfo1;
    private javax.swing.JPanel jPanelStatus;
    private javax.swing.JPanel jPanelTime;
    private javax.swing.JPanel jPnlCanvas;
    private pCSDT.Presentation.JPnlObjMgr jPnlObjMgr;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPaneLeft;
    private javax.swing.JSplitPane jSplitPaneMain;
    private javax.swing.JSplitPane jSplitPaneRight;
    private javax.swing.JTabbedPane jTabMain;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTxtDesc;
    private javax.swing.JTextField jTxtName;
    private static java.awt.List list1;
    // End of variables declaration//GEN-END:variables

    // Override these methods if you want interactive response on simulation
    public void OnKeyPressed(KeyEvent event) {}
    public void OnKeyReleased(KeyEvent event) {}
    public void OnKeyTyped(KeyEvent event) {}
}
