/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPnlObjMgr.java
 *
 * Created on Mar 4, 2011, 9:19:35 PM
 */

package pCSDT.Presentation;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import pCSDT.Scripting.*;

/**
 *
 * @author tylau
 */
public class JPnlObjMgr extends javax.swing.JPanel {

    DefaultListModel unsortedModel = new DefaultListModel();
    DefaultListModel imgListModel = new DefaultListModel();
    SortedListModel sortedModel = new SortedListModel(unsortedModel, SortedListModel.SortOrder.UNORDERED);
    PEngine pEngine;
    GUI m_parent;
    java.text.DecimalFormat decFormat = new java.text.DecimalFormat("0.00");
    boolean m_bSelChangeRequested = false;
    boolean DefaultAdded = false;
    public static PObject currentObj = null;
    
    public static HashMap<PObject, ArrayList<String>> ObjectImageMap = new HashMap<PObject, ArrayList<String>>();

    /** Creates new form JPnlObjMgr */
    public JPnlObjMgr() {
        initComponents();
        jListObjs.setModel(sortedModel);
        jListImgs.setModel(imgListModel);
        ListItemRenderer renderer = new ListItemRenderer();
        jListObjs.setCellRenderer(renderer);
    }

    /** Creates new form JPnlObjectManager */
    public JPnlObjMgr(PEngine pEngine)
    {
        this();
        this.pEngine = pEngine;
        ////propertyMgr = new JPnlPropMgr(this);
        ////jPanel1.setLayout(new BorderLayout(5,5));
        ////jPanel1.add(propertyMgr, BorderLayout.CENTER);
    }

    public void SetParent(GUI parent)
    {
	m_parent = parent;
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListObjs = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jButtonCreateObj = new javax.swing.JButton();
        jButtonMoveUp = new javax.swing.JButton();
        jButtonMoveDown = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jButtonCreateImg = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListImgs = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        propertyMgr = new pCSDT.Presentation.JPnlInitPropMgr(this);

        setPreferredSize(new java.awt.Dimension(520, 165));
        setLayout(new java.awt.GridLayout(1, 2));

        jPanel1.setPreferredSize(new java.awt.Dimension(260, 165));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Objects"));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(260, 132));

        jListObjs.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListObjs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListObjsMouseClicked(evt);
            }
        });
        jListObjs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListObjsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListObjs);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setPreferredSize(new java.awt.Dimension(137, 33));

        jButtonCreateObj.setText("Create New Object");
        jButtonCreateObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateObjActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonCreateObj);

        jButtonMoveUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/up.png"))); // NOI18N
        jButtonMoveUp.setToolTipText("Move up");
        jButtonMoveUp.setMaximumSize(new java.awt.Dimension(23, 23));
        jButtonMoveUp.setMinimumSize(new java.awt.Dimension(23, 23));
        jButtonMoveUp.setPreferredSize(new java.awt.Dimension(23, 23));
        jButtonMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveUpActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonMoveUp);

        jButtonMoveDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/icons/down.png"))); // NOI18N
        jButtonMoveDown.setToolTipText("Move down");
        jButtonMoveDown.setMaximumSize(new java.awt.Dimension(23, 23));
        jButtonMoveDown.setMinimumSize(new java.awt.Dimension(23, 23));
        jButtonMoveDown.setPreferredSize(new java.awt.Dimension(23, 23));
        jButtonMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveDownActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonMoveDown);

        jPanel1.add(jPanel3, java.awt.BorderLayout.NORTH);

        add(jPanel1);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jButtonCreateImg.setText("Create New Image");
        jButtonCreateImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateImgActionPerformed(evt);
            }
        });
        jPanel5.add(jButtonCreateImg);

        jPanel4.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Images for current object"));

        jListImgs.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListImgs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListImgsMouseClicked(evt);
            }
        });
        jListImgs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListImgsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListImgs);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        add(jPanel4);

        jPanel2.setPreferredSize(new java.awt.Dimension(260, 165));
        jPanel2.setLayout(new java.awt.BorderLayout());

        propertyMgr.setMinimumSize(new java.awt.Dimension(10, 10));
        propertyMgr.setPreferredSize(new java.awt.Dimension(10, 10));
        jPanel2.add(propertyMgr, java.awt.BorderLayout.CENTER);

        add(jPanel2);
    }// </editor-fold>//GEN-END:initComponents

    private void jListObjsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListObjsValueChanged
        //System.out.println("jListObjsValueChanged");
        // A selection change was requested by the parent.  To prevent a recursive interaction,
	// we stop further propagation here.
	if (m_bSelChangeRequested)
            return;
        if (!evt.getValueIsAdjusting())
            return;
        imgListModel.clear();
        ArrayList<String> temp = ObjectImageMap.get((PObject) jListObjs.getSelectedValue());
        if(temp != null){
            for(String s : temp){
                imgListModel.addElement(s);
            }
        }
	m_parent.SetSelection((PObject)sortedModel.getElementAt(jListObjs.getSelectedIndex()));
    }//GEN-LAST:event_jListObjsValueChanged

    private void jListObjsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListObjsMouseClicked
        if (evt.isMetaDown()) {
            //System.out.println("jListObjsMouseClicked");
            // first select the item picked by the right-click
            int idx = jListObjs.locationToIndex(evt.getPoint());
            if (idx > -1) {
                jListObjs.setSelectedIndex(idx);
            }
            // then detect which object is selected
            final PObject obj = (PObject)jListObjs.getSelectedValue();

            if (obj != null && !(obj instanceof pCSDT.Scripting.PEngine)) {
                // stg has been selected
                // display popup menu
                ButtonGroup buttonGroup = new ButtonGroup();
                JPopupMenu popupMenu = new JPopupMenu();
                final JRadioButtonMenuItem items[] = new JRadioButtonMenuItem[2];
                // construct each menu item and add to popup menu;
                // also enable event handling for each menu item
                items[0] = new JRadioButtonMenuItem("Delete");
                popupMenu.add(items[0]);
                buttonGroup.add(items[0]);
                items[0].addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent event) {
                        if (event.getSource() == items[0]) {
                            m_parent.RemoveObject(obj);
                            // set selected object to default
                            m_parent.SetSelection(m_parent.GetDefaultObject().m_obj);
                        }
                    }
                });
                items[1] = new JRadioButtonMenuItem("Duplicate");
                popupMenu.add(items[1]);
                buttonGroup.add(items[1]);
                items[1].addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent event) {
                        if (event.getSource() == items[1]) {
                            GuiAutomatableType t = GuiAutomatableType.Get(obj.getClass());
                            //PObject obj = m_parent.ConstructObject(t.GetClass(), "", "");
                            PObject obj2 = m_parent.DuplicateObject(obj);
                            obj2.SetTempName();
                            // set selected object to the duplicated object
                            m_parent.SetSelection(obj2);
                        }
                    }
                });
                popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_jListObjsMouseClicked

    private void jButtonCreateObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateObjActionPerformed
        JFrame f = new JFrame();
        JDlgCreateObj d = new JDlgCreateObj(f, true);
        d.setJDlgCreateObj(this, m_parent);
        d.setVisible(true);
    }//GEN-LAST:event_jButtonCreateObjActionPerformed

    private void jButtonMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveUpActionPerformed

        int selectedIdx = jListObjs.getSelectedIndex();
        // change the drawing orders of the PObject
        if (selectedIdx != -1) {
            // update the drawing order attached to the object
            for (int i = 0; i < jListObjs.getModel().getSize(); i++) {
                if (i == selectedIdx) {
                    if (i >=1) {
                        ((PObject)sortedModel.getElementAt(i-1)).drawingOrder -= 1;
                        ((PObject)sortedModel.getElementAt(i)).drawingOrder += 1;
                        jListObjs.setSelectedIndex(i-1);
                    }
                }
            }
        }

        // sort the objects by their respective m.drawOrder
        Collections.sort(pEngine.GetObjects());
        Collections.reverse(pEngine.GetObjects());
        sortedModel.setSortOrder(SortedListModel.SortOrder.DESCENDING);
    }//GEN-LAST:event_jButtonMoveUpActionPerformed

    private void jButtonMoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveDownActionPerformed
        
        int selectedIdx = jListObjs.getSelectedIndex();
        // change the drawing orders of the PObject
        if (selectedIdx != -1) {
            // update the drawing order attached to the object
            for (int i = 0; i < jListObjs.getModel().getSize(); i++) {
                if (i == selectedIdx) {
                    if (i < jListObjs.getModel().getSize()-1) {
                        ((PObject)sortedModel.getElementAt(i)).drawingOrder -= 1;
                        ((PObject)sortedModel.getElementAt(i+1)).drawingOrder += 1;
                        jListObjs.setSelectedIndex(i+1);
                    }
                }
            }
        }

        // sort the objects by their respective m.drawOrder
        Collections.sort(pEngine.GetObjects());
        Collections.reverse(pEngine.GetObjects());
        sortedModel.setSortOrder(SortedListModel.SortOrder.DESCENDING);
    }//GEN-LAST:event_jButtonMoveDownActionPerformed

    private void jListImgsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListImgsMouseClicked
        if (evt.isMetaDown()) {
            // first select the item picked by the right-click
            int idx = jListImgs.locationToIndex(evt.getPoint());
            if (idx > -1) {
                jListImgs.setSelectedIndex(idx);
            }
            // then detect which object is selected
            final Object obj = jListImgs.getSelectedValue();

            if (obj != null) {
                // stg has been selected
                // display popup menu
                ButtonGroup buttonGroup = new ButtonGroup();
                JPopupMenu popupMenu = new JPopupMenu();
                final JRadioButtonMenuItem items[] = new JRadioButtonMenuItem[1];
                // construct each menu item and add to popup menu;
                // also enable event handling for each menu item
                items[0] = new JRadioButtonMenuItem("Delete");
                popupMenu.add(items[0]);
                buttonGroup.add(items[0]);
                items[0].addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent event) {
                        if (event.getSource() == items[0]) {
                            if(obj.equals(GetImage((PObject) jListObjs.getSelectedValue()))){
                                //If Image is currently being used, load in the default one
                                LoadImage(imgListModel.get(0).toString(), (PObject) jListObjs.getSelectedValue());
                            }
                            imgListModel.removeElement(obj.toString());
                            ArrayList<String> temp = ObjectImageMap.get(jListObjs.getSelectedValue());
                            int i = -1;
                            for(String s : temp){
                                if(s.equals(obj.toString())) i = temp.indexOf(s);
                            }
                            temp.remove(i);
                            ObjectImageMap.remove(jListObjs.getSelectedValue());
                            ObjectImageMap.put((PObject) jListObjs.getSelectedValue(), temp);
                        }
                    }
                });
                popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_jListImgsMouseClicked

    private void jButtonCreateImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateImgActionPerformed
        //System.out.println("CreateImgPerformed");
        JFileChooser fc = new JFileChooser();
        boolean found = false;
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            if(file.toString().endsWith(".jpg") || file.toString().endsWith(".png")){
                //Only allow images to be uploaded once for each object
                for(int i = 0; i < imgListModel.size(); i++){
                    if(imgListModel.getElementAt(i).equals(file.toString())){
                        found = true;
                    }
                }
                if(!found) imgListModel.addElement(file.toString());
            
                if(ObjectImageMap.containsKey((PObject) jListObjs.getSelectedValue())){
                    if(!found) {
                        ObjectImageMap.get((PObject) jListObjs.getSelectedValue()).add(file.toString());
                    }
                } else{
                    ArrayList<String> temp = new ArrayList<String>();
                    temp.add(file.toString());
                    ObjectImageMap.put((PObject) jListObjs.getSelectedValue(), temp);
                }
                PEngine.default_map.put((PObject) jListObjs.getSelectedValue(), false);
                m_parent.SetSelection((PObject)sortedModel.getElementAt(jListObjs.getSelectedIndex()));
                LoadImage(file.toString(), (PObject) jListObjs.getSelectedValue());
            }
        }
    }//GEN-LAST:event_jButtonCreateImgActionPerformed

    private void jListImgsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListImgsValueChanged
         // A selection change was requested by the parent.  To prevent a recursive interaction,
	// we stop further propagation here.
	//System.out.println("JPNL jListImgsValueChanged");
        if (m_bSelChangeRequested)
            return;
        if (!evt.getValueIsAdjusting())
            return;
        //Used for coloring purposes 
        if(jListImgs.getSelectedIndex() == 0){
            PEngine.default_map.put((PObject) jListObjs.getSelectedValue(), true);
        }
        else{
            PEngine.default_map.put((PObject) jListObjs.getSelectedValue(), false);
        }
        LoadImage((String) imgListModel.getElementAt(jListImgs.getSelectedIndex()), (PObject) jListObjs.getSelectedValue());
    }//GEN-LAST:event_jListImgsValueChanged

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCreateImg;
    private javax.swing.JButton jButtonCreateObj;
    private javax.swing.JButton jButtonMoveDown;
    private javax.swing.JButton jButtonMoveUp;
    private javax.swing.JList jListImgs;
    private javax.swing.JList jListObjs;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private pCSDT.Presentation.JPnlInitPropMgr propertyMgr;
    // End of variables declaration//GEN-END:variables

    // assign drawing order according to what is now in the list
    public void UpdateDrawingOrder()
    {
        int totalNum = sortedModel.getSize();
        for (int i = 0; i < totalNum; i++) {
            ((PObject)sortedModel.getElementAt(i)).drawingOrder = totalNum-i-1;
        }
    }

    // get the current maximum drawing order
    public int GetMaxDrawingOrder() {
        int max = -1;
        for (int i = 0; i < sortedModel.getSize(); i++) {
            int order = ((PObject)sortedModel.getElementAt(i)).drawingOrder;
            if (order > max) {
                max = order;
            }
        }
        return max;
    }

    public void AddObject(PObject obj)
    {
        //System.out.println("JPnlObjMgr.addObject()");
        unsortedModel.addElement(obj);
        imgListModel.clear();
        ObjectImageMap.put(obj, new ArrayList<String>());
        for(PProperty p : obj.GetProperties()){
            if(p.GetName().equals(obj + ".icon")){
                ObjectImageMap.get(obj).add(p.GetValue().toString());
                imgListModel.addElement(p.GetValue().toString());
            }
        }
        if (obj.drawingOrder == -1) {
            obj.drawingOrder = GetMaxDrawingOrder() + 1;
        }
        // sort the objects by their respective m.drawOrder
        Collections.sort(pEngine.GetObjects());
        Collections.reverse(pEngine.GetObjects());
        sortedModel.setSortOrder(SortedListModel.SortOrder.DESCENDING);
    }

    public void RemObject(PObject obj)
    {
        //System.out.println("JPnlObjMgr.RemObject()");
        unsortedModel.removeElement(obj);
        ObjectImageMap.remove(unsortedModel.indexOf(obj));
        UpdateDrawingOrder();
        // sort the objects by their respective m.drawOrder
        Collections.sort(pEngine.GetObjects());
        Collections.reverse(pEngine.GetObjects());
    }

   public void ReloadObjects(PEngine engine)
    {
        //System.out.println("JPnlObjMgr.ReloadObjects()");
        unsortedModel.removeAllElements();
        unsortedModel.addElement(engine);
        if (engine.drawingOrder < 0) {

        }
        Vector<PObject> objs = engine.GetObjects();
	for(PObject obj : objs){
            imgListModel.clear();
            unsortedModel.addElement(obj);
                ArrayList<String> temp = ObjectImageMap.get(obj);
                if(temp != null){
                    for(String s : temp){
                        imgListModel.addElement(s);
                    }
                }
            }

        sortedModel.setSortOrder(SortedListModel.SortOrder.DESCENDING);
        UpdateDrawingOrder();
        // sort the objects by their respective m.drawOrder
        Collections.sort(pEngine.GetObjects());
        Collections.reverse(pEngine.GetObjects());
    }

    public void SetSelectedObject(PObject obj)
    {
        m_bSelChangeRequested = true;
        int i = -1;
        for (int j = 0; i==-1 && j < sortedModel.getSize(); j++) {
            if (sortedModel.getElementAt(j) == obj) {
                i = j;
            }
        }
	if(i != -1)
            jListObjs.setSelectedIndex(i);

	m_bSelChangeRequested = false;
        propertyMgr.BindObject(obj);
        currentObj = (PObject) jListObjs.getSelectedValue();
    }
    
    public void LoadImage(String image, PObject pObj){
        //System.out.println("JPNL LoadImage");
    //Load image saved by user
        for(PProperty p : pObj.GetProperties()){
            if(p.GetName().equals(pObj + ".icon")){
                try {
                    p.SetValue(image);
                } catch (IllegalAccessException ex) {
                    System.out.println("Problem in LoadImage");
                    Logger.getLogger(PEngine.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        m_parent.SetSelection((PObject)sortedModel.getElementAt(jListObjs.getSelectedIndex()));
    }
    
    public String GetImage(PObject pObj){
        //Find image for a given object
        String s = ""; 
        for(PProperty p : pObj.GetProperties()){
            //Set the icon property to the new image file created in GetObjectImage()
            if(p.GetName().equals(pObj + ".icon")){
                s = p.GetValue().toString();
            }
        }
        return s;
    }
    
    private class ListItemRenderer extends JLabel implements ListCellRenderer {

        public ListItemRenderer() {
            setOpaque(true);
        }
        /*
         * This method finds the image and text corresponding
         * to the selected value and returns the label, set up
         * to display the text and image.
         */
        public Component getListCellRendererComponent(
                                           JList list,
                                           Object value,
                                           int index,
                                           boolean isSelected,
                                           boolean cellHasFocus) {
            //Get the selected index. (The index param isn't
            //always valid, so just use the value.)

            ///int selectedIndex = ((Integer)value).intValue();

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            // get the handle to the PObject being selected
            ///PObject selectedPObj = (PObject)model.get(selectedIndex);
            PObject selectedPObj = (PObject)sortedModel.getElementAt(index);

            setText(selectedPObj.GetName());
            setToolTipText("Type: " + selectedPObj.GetClassName());

            /*
            //Set the icon and text.  If icon was null, say so.
            ImageIcon icon = images[selectedIndex];
            String pet = petStrings[selectedIndex];
            setIcon(icon);
            if (icon != null) {
                setText(pet);
                setFont(list.getFont());
            } else {
                setUhOhText(pet + " (no image available)",
                            list.getFont());
            }
            */

            return this;
        }
    }
}