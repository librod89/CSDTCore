/*
 * JPnlMethodMgr.java
 *
 * Created on March 1, 2009, 12:16 PM
 */

package pCSDT.Presentation;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import pCSDT.Scripting.Point3D;
import pCSDT.Scripting.SCElem.*;

/**
 *
 * @author  Jhilmil
 * This class provides management operations for all methods supported by a
 * particular class.
 */
public abstract class JPnlDragParticipant extends JPnlMgr implements MouseListener, MouseMotionListener
{
    protected DragSource m_dragSource;

    // This is the last known drag participant
    protected JPnlDragParticipant lastDrag = null;

    // Layout info, for use when constructing GUIs.
    protected LayoutInfo m_l;

    public class DragSource
    {
        public int m_dragXOffset;
	public int m_dragYOffset;
	public JPnlLine m_codelet;
        boolean bMoved = false;  // record whether it has been moved since registered

	public DragSource(JPnlLine codelet, int dragXOffset, int dragYOffset)
	{
            m_codelet = codelet;
            m_dragXOffset = dragXOffset;
            m_dragYOffset = dragYOffset;
	}
    }

    /**
     *
     * @param aPnlScrpt Creates a method manager, with a reference to the scriptlet panel.
     */
    public JPnlDragParticipant(LayoutInfo l)
    {
	m_l = l;
        initComponents();

        // Register mouse listeners
        addMouseListener(this);
        addMouseMotionListener(this);
	setLayout(new GridBagLayout());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    protected void UpdateLocation(MouseEvent e)
    {
         m_dragSource.m_codelet.setLocation(
			e.getLocationOnScreen().x - getRootPane().getLocationOnScreen().x - m_dragSource.m_dragXOffset,
			e.getLocationOnScreen().y - getRootPane().getLocationOnScreen().y - m_dragSource.m_dragYOffset
		);
    }

    /**
     * Locate a drag source
     * @param pt The point, relative to this component, where dragging is taking place
     * @return the drag source
     */
    public abstract DragSource LocateDragSource(Point3D pt);

    /**
     * Set up the given drag source: may remove it from the JPnlDragParticipant
     * @param ds the drag source
     */
    public abstract void SetUpDragSource(DragSource ds);

    /**
     * Releases a drag source when dragging is done
     * @param source The source to be released, returned in a prior call to GenerateDragSource
     */
    public abstract void ReleaseDragSource(JPnlLine source);

    /**
     * Updates drag information
     * @param pt The point where dragging is taking place.  May be null if the line is being dragged away.
     * @param line The line being dragged around.  Null iff pt is null.
     */
    public abstract void UpdateDrag(Point3D pt, JPnlLine line);

    /**
     * Notifies the derived class that dragging is done
     * @param pt The point at which dragging is currently being stopped
     * @param line The line being dragged
     */
    public abstract void StopDrag(Point3D pt, JPnlLine line);

    /**
     * Finds the first drag target at the specified point
     * @param p The point in screen coordinates where the drag target is located
     * @return The located drag source, or null if no such source exists at the given point
     */
    protected abstract JPnlDragParticipant DragTargetAtPoint(Point3D p);

    //Mouse event handlers
    public void mousePressed(MouseEvent e)
    {
        // Make sure this is a left mouse down:
	if(
            (e.getModifiersEx() & MouseEvent.BUTTON1_DOWN_MASK) == 0 &&
             e.getButton() == MouseEvent.BUTTON1
	)
            return;

        // set the m_dragSource here
        Point eOnScreen = e.getLocationOnScreen();
        Point thisOnScreen = getLocationOnScreen();
        
        DragSource m = LocateDragSource(
                new Point3D(eOnScreen.x-thisOnScreen.x,
                            eOnScreen.y-thisOnScreen.y));
        if(m == null)
            return;
        else {
            m_dragSource = m;
        }
    }

    public void mouseDragged(MouseEvent me)
    {
        if(m_dragSource != null) {
            if (!m_dragSource.bMoved) {
                // remove it from the JPnlDragParticipant, if needed
                SetUpDragSource(m_dragSource);
                // Add codelet to the drag layer
                JLayeredPane p = getRootPane().getLayeredPane();
                p.add(m_dragSource.m_codelet, JLayeredPane.DRAG_LAYER);
                m_dragSource.bMoved = true;
            }
            // otherwise, update its location according to current mouse location
            Point pt = me.getLocationOnScreen();
            pt.x -= m_dragSource.m_dragXOffset;
            pt.y -= m_dragSource.m_dragYOffset;
            JPnlDragParticipant tgt = DragTargetAtPoint(new Point3D(pt));
            if(lastDrag == null)
                lastDrag = tgt;
            else if(tgt != lastDrag)
            {
                lastDrag.UpdateDrag(null, null);
                lastDrag = tgt;
            }

            if(tgt != null)
                tgt.UpdateDrag(GetRelativePoint(tgt, me), m_dragSource.m_codelet);
            UpdateLocation(me);
            revalidate();
            repaint();
        }
    }

    public void mouseReleased(MouseEvent e)
    {
        if(m_dragSource == null) {
            return;
        }
        // only proceed if the dragSource has really been dragged before
        // to avoid codelet duplicate when a codelet is clicked and immediately
        // released
        if (m_dragSource.bMoved) {
            JLayeredPane layered = getRootPane().getLayeredPane();
            layered.remove(m_dragSource.m_codelet);
            if(lastDrag != null)
            {
                lastDrag.StopDrag(GetRelativePoint(lastDrag, e), m_dragSource.m_codelet);
                lastDrag = null;
            }
            m_dragSource = null;
            layered.repaint();
        }
    }

    /**
     * Makes the input point relative to this component
     *
     * @param pt The point to be made relative to this component, in screen coordinates
     */
    public Point3D GetRelativePoint(Component c, MouseEvent e)
    {
	Point pt = e.getLocationOnScreen();
	Point r = c.getLocationOnScreen();
	return new Point3D(pt.x - r.x - m_dragSource.m_dragXOffset, pt.y - r.y - m_dragSource.m_dragYOffset);
    }

    public void mouseClicked(MouseEvent e) {}
    public void mouseMoved(MouseEvent e) {}
    public void mouseEntered(MouseEvent e) {}
    public void mouseExited(MouseEvent e) {}
}
