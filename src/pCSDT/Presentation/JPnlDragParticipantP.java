/*
 * JPnlMethodMgr.java
 *
 * Created on March 1, 2009, 12:16 PM
 */

package pCSDT.Presentation;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import pCSDT.Scripting.Point3D;
import pCSDT.Scripting.SCElem.*;
import pCSDT.Utility;

/**
 *
 * @author  Jhilmil
 * This class provides management operations for all methods supported by a
 * particular class.
 */
public abstract class JPnlDragParticipantP extends JPnlDragParticipant
{
	
    // Utility constraints class:
    public GridBagConstraints c = new GridBagConstraints(
        0, 0, 1, 1,
        1, 0,
        GridBagConstraints.CENTER,
        GridBagConstraints.BOTH,
        new Insets(3, 10, 3, 10), 0, 0
    );

    /**
     *
     * @param aPnlScrpt Creates a method manager, with a reference to the scriptlet panel.
     */
    public JPnlDragParticipantP(LayoutInfo l)
    {
        super(l);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(125, 125, 125));
        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    protected void UpdateLocation(MouseEvent e)
    {
        m_dragSource.m_codelet.setLocation(
			e.getLocationOnScreen().x - getRootPane().getLocationOnScreen().x - m_dragSource.m_dragXOffset,
			e.getLocationOnScreen().y - getRootPane().getLocationOnScreen().y - m_dragSource.m_dragYOffset
		);
    }

    /**
     * Releases a drag source when dragging is done
     * @param source The source to be released, returned in a prior call to GenerateDragSource
     */
    public abstract void ReleaseDragSource(JPnlLine source);

    /**
     * Updates drag information
     * @param pt The point where dragging is taking place.  May be null if the line is being dragged away.
     * @param line The line being dragged around.  Null iff pt is null.
     */
    public abstract void UpdateDrag(Point3D pt, JPnlLine line);

    /**
     * Notifies the derived class that dragging is done
     * @param pt The point at which dragging is currently being stopped
     * @param line The line being dragged
     */
    public abstract void StopDrag(Point3D pt, JPnlLine line);

    /**
     * Finds the first drag target at the specified point
     * @param p The point in screen coordinates where the drag target is located
     * @return The located drag source, or null if no such source exists at the given point
     */
    protected JPnlDragParticipant DragTargetAtPoint(Point3D p)
    {
	Container root = getRootPane().getContentPane();
	p.x -= root.getLocationOnScreen().x;
	p.y -= root.getLocationOnScreen().y;
	return Utility.GetTypedAncestor(JPnlDragParticipant.class, root.findComponentAt(p.Get2DPoint()));
    }
}
