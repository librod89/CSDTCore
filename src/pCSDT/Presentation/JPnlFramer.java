/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPnlFramer.java
 *
 * Created on Aug 5, 2010, 2:50:49 PM
 */

package pCSDT.Presentation;
import java.awt.*;
import pCSDT.Scripting.*;
import pCSDT.Scripting.SCElem.*;
import pCSDT.Utility;

/**
 * This is an event framer
 * @author sanchj3
 */
public class JPnlFramer extends javax.swing.JPanel {
	// This is the parent event of the framer, if one exists:
	JPnlLineEvent pnlEvent;

	// This is the statement list
	JPnlLine pnlStatements;

	// This is the insertion position where the statement is expected to be inserted
	InsertionPosition insert;

    /** Creates new form JPnlFramer */
    public JPnlFramer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

	/**
	 *
	 * @param pt The point to search on
	 * @return The first line before the point given by pt
	 */
	public JPnlLine GetPrevLine(Point pt)
	{
		return null;
	}

	/**
	 *
	 * @param pt The point to search on
	 * @return The next line after the point given by pt
	 */
	public JPnlLine GetNextLine(Point pt)
	{
		return null;
	}

	/**
	 * Updates the location where a codelet is to be dropped
	 * @param pt The point where the cursor is currently located, in screen coordinates
	 */
	public void UpdateInsertionPoint(Point pt, IStatement s)
	{
		Point screen = getLocationOnScreen();

		// Find the adjusted coordinates:
		Point adj = new Point(pt.x - screen.x, pt.y - screen.y);

		// Deselect the drop target of the previous ancestor, if set:
		ClearInsertionPosition();

		// Determine the control located at this coordinate.  Note that this control
		// could be a deep child of a component.  As a result, we ask the utility function
		// to get the first ancestor whose type is compatible with JPnlLine.
		JPnlLine lDropTarget = Utility.GetTypedAncestor(JPnlLine.class, getComponentAt(adj));
		if(lDropTarget == null)
			// No typed ancestor exists, give up.
			return;

		// Once we've found the corresponding ancestor, ask the ancestor to update a
		// drop target.
		insert = lDropTarget.GetInsertionPosition(
			new Point(
				pt.x - lDropTarget.getX(),
				pt.y - lDropTarget.getY()
			),
			s
		);

		// Highlight on the drop target:
		insert.Highlight();
	}

	public void ClearInsertionPosition()
	{
		if(insert == null)
			return;
		insert.ClearHighlight();
	}
}
